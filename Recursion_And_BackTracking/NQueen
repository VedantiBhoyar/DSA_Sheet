class Solution {
    char board[][];
    List<List<String>>res=new ArrayList<>();
    public List<List<String>> solveNQueens(int n) {
        board=new char[n][n];
        for(char row[]:board)
           Arrays.fill(row,'.');
        generate(0,0,0,n);
        return res;        
    }
    void generate(int index,int row,int col,int n){
        if(col==board[0].length){
            row++;
            col=0;
        }
        if(n==0){
            res.add(convertedToList(board));
            return;
        }
        if(row==board.length)
          return;
        if(isValid(row,col)){
            board[row][col]='Q';
            n--;
            generate(index+1,row+1,0,n);
            board[row][col]='.';
            n++;

        }
        generate(index+1,row,col+1,n);
    }
    boolean isValid(int row,int col){
        int n=board.length;
        for(int i=0;i<n;i++){
            if(board[i][col]=='Q' || board[row][i]=='Q')
              return false;
        }
        int i=row,j=col;
        while(i>=0 && j>=0){
            if(board[i][j]=='Q')
              return false;
            i--;
            j--;
        }
        i=row;j=col;
        while(i>=0 && j<n){
            if(board[i][j]=='Q')
              return false;
            i--;
            j++;
        }
        return true;
    }
    List<String>convertedToList(char arr[][]){
        List<String>list=new ArrayList<>();
        for(char row[]:arr){
            StringBuilder sb=new StringBuilder();
            for(char ch:row)
              sb.append(ch);
            list.add(sb.toString());
        }
        return list;
    }
}
