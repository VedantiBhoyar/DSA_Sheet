/* 

Question
Given two singly linked lists of size N and M, write a program to get the point where two linked lists intersect each other.

Example 1:

Input: 
Linked List 1 = 4->1->common
Linked List 2 = 5->6->1->common
common = 8->4->5->NULL
Output: 8

Explanation: 

4              5
|              |
1              6
 \             /
  8   -----  1 
   |
   4
   |
  5
  |
  NULL   



*/

// Solution

/* Node of a linked list
 class Node {
   int data;
    Node next;
    Node(int d)  { data = d;  next = null; }
}
 Linked List class
class LinkedList
{
    Node head;  // head of list
}*/

class Intersect
{
    //Function to find intersection point in Y shaped Linked Lists.
	int intersectPoint(Node head1, Node head2)
	{
         
         Node curr1=head1,curr2=head2;
         int len1=size(curr1);
         int len2=size(curr2);
         
         int diff=Math.abs(len1-len2);
         
         if(len1>len2)
           curr1=shift(curr1,diff);
         else
          curr2=shift(curr2,diff);

// checking if the linkedlist have same nodes

        while(curr1!=null && curr2!=null){
            
            if(curr1==curr2)
              return curr1.data;
              
             curr1=curr1.next;
             curr2=curr2.next;
        }
        return -1;
	}

// calculating the length of linkedlist

	int size(Node head){
        Node curr=head;
        int len=0;
        while(curr!=null){
            len++;
            curr=curr.next;
        }
        return len;
    }

// Shifting the greater linkedlist 'diff' times

    Node shift(Node head,int diff){
       for(int i=0;i<diff;i++)
          head=head.next;
        return head;
    }
}




